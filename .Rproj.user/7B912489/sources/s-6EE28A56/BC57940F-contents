library(tidyverse)
library(readxl)
library(lubridate)
require(gganimate)
require(magick)
require(gifski)

######### In this project I use publicly available data to visualize the trends in food production, 
######### food consumption, food expenditure, and other items I add as I get data. I am interested in food expenditure
#########  by category. For instance does expenditure on sweet/salty products went up over time.... Or how peoples diets
#########  also effect the consumption and expenditure of certain products. This is myu initial thought process. I develop
######## or add new things as I get more ideas.

####### This is not a causal or any kind of work. For now this is purely data and data visualization project. 



######################################################################################################################################
################################################### FOOD SALES #######################################################################
######################################################################################################################################

##### The following has data of food sales in the United States in dollar terms. The sales are further divided
##### into Food at Home (FAH), Food Away From Home (FAFH) and are in both nominal and constant dollars.
##### The data are in million dollars.
foodSales_monthly <- read_excel("Data/FoodExpenditures/monthly_sales_TaxesTips.xlsx") %>% as.data.frame()
foodSales_monthly <- foodSales_monthly[-(1:4),]
names(foodSales_monthly) <- c("Year", "Month", "FAH_Nominal", "FAFH_Nominal", "TotalSales_Nominal",
                              "FAH_ConstantDollar(1988=100)", "FAFH_ConstantDollar(1988=100)", 
                              "TotalSales_ConstantDollar(1988=100)")
# First we check the class type of the data. If they are of not the correct type, we convert them to 
# the data type we want.
sapply(foodSales_monthly, class)

cols.num <- c("Year", "FAH_Nominal", "FAFH_Nominal", "TotalSales_Nominal",
              "FAH_ConstantDollar(1988=100)", "FAFH_ConstantDollar(1988=100)", 
              "TotalSales_ConstantDollar(1988=100)")

foodSales_monthly[cols.num] <- sapply(foodSales_monthly[cols.num],as.numeric)

rownames(foodSales_monthly) <- 1:nrow(foodSales_monthly)







######################################################################################################################################
################################################### FOOD Expenditures ################################################################
######################################################################################################################################
foodSales_Exp_Nominal <- read_excel("Data/FoodExpenditures/Nominal_Food_Alcohol_Expenditures_TaxesTips.xlsx") %>% as.data.frame()

foodSales_Exp_Nominal_FAH <- foodSales_Exp_Nominal %>% select(Year, GroceryStores_FAH, ConvenienceStores_FAH, OtherFoodStores_FAH,
                                                             WarehouseClubsAndSupercenters_FAH, MassMerchandisers_FAH, 
                                                             OtherStoresAndFoodservice_FAH, MailOrderAndHomeDelivery_FAH,
                                                             DirectSelling_FarmersManufacturersWholesalers_FAH, HomeProduction_Donations_FAH,
                                                             Total_FAH)
names(foodSales_Exp_Nominal_FAH) <- c("Year", "Grocery Stores", "Convenience Stores", "Other Food Stores",
                                      "Big Box Stores", "Mass Merchandisers", "Food Service Stores", "Home Delivery",
                                      "Wholesalers", "Home Production", "Total")

foodSales_Nominal_FAH <- foodSales_Exp_Nominal_FAH %>% select(-Total) %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_FAH_plot <- foodSales_Nominal_FAH  %>%
  ggplot(aes(x=Year, y=Expenditure,color=Type)) + geom_line() + 
  labs(x="Year", y="Dollars spent (in million)")

foodSales_Nominal_FAH_animated_plot <- foodSales_Nominal_FAH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Nominal_FAH_animated_plot <- foodSales_Nominal_FAH_animated_plot + theme_light(base_size = 16)

foodSales_Nominal_FAH_animated_plot <- foodSales_Nominal_FAH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                     panel.grid.minor = element_blank())

foodSales_Nominal_FAH_animated_plot <- foodSales_Nominal_FAH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Expenditure, label=Type))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Food At Home Expenditure in the U.S.")) 

foodSales_Nominal_FAH_animation <- animate(foodSales_Nominal_FAH_animated_plot,  height = 500, width = 1000,
                                           fps=6, start_pause=5, end_pause=20,  
                                           renderer = gifski_renderer("FAH-Expenditure_TipsTaxes.gif"))




foodSales_Exp_Nominal_FAFH <- foodSales_Exp_Nominal %>% select(Year, `Full-serviceRestaurants_FAFH`, `Limited-serviceRestaurants_FAFH`,
                                                               DrinkingPlaces_FAFH, HotelsAndMotels_FAFH, RetailStoresAndVending_FAFH,
                                                               RecreationalPlaces_FAFH, SchoolsAndColleges_FAFH, OtherFAFHSales_NEC_FAFH,
                                                               FoodFurnished_Donated_FAFH, Total_FAFH)
names(foodSales_Exp_Nominal_FAFH) <- c("Year", "Full Service Restaurants", "Limited Service Restaurants",
                                       "Drinking Places", "Hotels and Motels", "Retail Stores and Vending Machines",
                                       "Recreational Places", "Schools and Colleges", "Other Sales", "Furnished or Donated",
                                       "Total")

foodSales_Nominal_FAFH <- foodSales_Exp_Nominal_FAFH %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_FAFH <- foodSales_Exp_Nominal_FAFH %>% select(-Total) %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_FAFH_plot <- foodSales_Nominal_FAFH  %>%
  ggplot(aes(x=Year, y=Expenditure,color=Type)) + geom_line() + 
  labs(x="Year", y="Dollars spent (in million)")

foodSales_Nominal_FAFH_animated_plot <- foodSales_Nominal_FAFH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Nominal_FAFH_animated_plot <- foodSales_Nominal_FAFH_animated_plot + theme_light(base_size = 16)

foodSales_Nominal_FAFH_animated_plot <- foodSales_Nominal_FAFH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                   panel.grid.minor = element_blank())

foodSales_Nominal_FAFH_animated_plot <- foodSales_Nominal_FAFH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Expenditure, label=Type))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Food away From Home Expenditure in the U.S.")) 

foodSales_Nominal_FAFH_animation <- animate(foodSales_Nominal_FAFH_animated_plot,  height = 500, width = 1000,
                                           fps=6, start_pause=5, end_pause=20,  
                                           renderer = gifski_renderer("FAFH-Expenditure_TipsTaxes.gif"))

foodSales_Exp_Nominal_AAH <- foodSales_Exp_Nominal %>% select(Year, LiquorStores_AAH, FoodStores_AAH, OtherAAHSales_NEC_AAH,
                                                              Total_AAH)
names(foodSales_Exp_Nominal_AAH) <- c("Year", "Liquor Stores", "Food Stores", "Other Sales", "Total")

foodSales_Nominal_AAH <- foodSales_Exp_Nominal_AAH %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_AAH <- foodSales_Exp_Nominal_AAH %>% select(-Total) %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_AAH_plot <- foodSales_Nominal_AAH  %>%
  ggplot(aes(x=Year, y=Expenditure,color=Type)) + geom_line() + 
  labs(x="Year", y="Dollars spent (in million)")

foodSales_Nominal_AAH_animated_plot <- foodSales_Nominal_AAH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Nominal_AAH_animated_plot <- foodSales_Nominal_AAH_animated_plot + theme_light(base_size = 16)

foodSales_Nominal_AAH_animated_plot <- foodSales_Nominal_AAH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                     panel.grid.minor = element_blank())

foodSales_Nominal_AAH_animated_plot <- foodSales_Nominal_AAH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Expenditure, label=Type))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Alcohol At Home Expenditure in the U.S.")) 

foodSales_Nominal_AAH_animation <- animate(foodSales_Nominal_AAH_animated_plot,  height = 500, width = 1000,
                                            fps=6, start_pause=5, end_pause=20,  
                                            renderer = gifski_renderer("AAH-Expenditure_TipsTaxes.gif"))


foodSales_Exp_Nominal_AAFH <- foodSales_Exp_Nominal %>% select(Year, Eating_DrinkingPlaces_AAFH, Hotels_Motels_AAFH,
                                                               OtherAAFH_NEC_AAFH, Total_AAFH)
names(foodSales_Exp_Nominal_AAFH) <- c("Year", "Eating and Drinking Places", "Hotels and Motels",
                                       "Other", "Total")
foodSales_Nominal_AAFH <- foodSales_Exp_Nominal_AAFH %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_AAFH <- foodSales_Exp_Nominal_AAFH %>% select(-Total) %>% gather(Type, Expenditure, -Year)

foodSales_Nominal_AAFH_plot <- foodSales_Nominal_AAFH  %>%
  ggplot(aes(x=Year, y=Expenditure,color=Type)) + geom_line() + 
  labs(x="Year", y="Dollars spent (in million)")

foodSales_Nominal_AAFH_animated_plot <- foodSales_Nominal_AAFH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Nominal_AAFH_animated_plot <- foodSales_Nominal_AAFH_animated_plot + theme_light(base_size = 16)

foodSales_Nominal_AAFH_animated_plot <- foodSales_Nominal_AAFH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                   panel.grid.minor = element_blank())

foodSales_Nominal_AAFH_animated_plot <- foodSales_Nominal_AAFH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Expenditure, label=Type))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Alcohol Away From Home Expenditure in the U.S.")) 

foodSales_Nominal_AAFH_animation <- animate(foodSales_Nominal_AAFH_animated_plot,  height = 500, width = 1000,
                                           fps=6, start_pause=5, end_pause=20,  
                                           renderer = gifski_renderer("AAFH-Expenditure_TipsTaxes.gif"))

foodSales_Exp_Nominal_No_TaxTip <- read_excel("Data/FoodExpenditures/Nominal_FoodAcohol_Expenditure_No_TaxesTips.xlsx") %>% as.data.frame()

#### For constant dollar series the expenditure is normalized as [Millions of dollars (1988=100)]
foodSales_Exp_ConstantDollar <- read_excel("Data/FoodExpenditures/Constant_Food_Alcohol_Expenditures_TaxesTips.xlsx") %>% as.data.frame()

foodSales_Exp_ConstantDollar_No_TaxTip <- read_excel("Data/FoodExpenditures/Constant_FoodAcohol_Expenditure_No_TaxesTips.xlsx") %>% as.data.frame()

#### This following is by the final purchaser. This includes both nominal and constant dollar measurement
foodSales_Exp_FinalPurchaser <- read_excel("Data/FoodExpenditures/food_expenditures_final_purchaser.xlsx") %>% as.data.frame()

foodSales_Exp_FinalPurchaser_FAH_Nominal <- foodSales_Exp_FinalPurchaser %>% select(Year, Households_Nom_FAH, 
                                                                                    Government_Nom_FAH, `Home production_Nom_FAH`)
names(foodSales_Exp_FinalPurchaser_FAH_Nominal) <- c("Year", "Households", "Government", "Home Production")

foodSales_Exp_FinalPurchaser_FAH_Nominal <- foodSales_Exp_FinalPurchaser_FAH_Nominal %>% gather(Type, Expenditure, -Year)

foodSales_Exp_FinalPurchaser_FAH_Nominal_plot <- foodSales_Exp_FinalPurchaser_FAH_Nominal  %>%
  ggplot(aes(x=Year, y=Expenditure,color=Type)) + geom_line() + 
  labs(x="Year", y="Dollars spent (in million)")

foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot <- foodSales_Exp_FinalPurchaser_FAH_Nominal_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot <- foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot + theme_light(base_size = 16)

foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot <- foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                     panel.grid.minor = element_blank())

foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot <- foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Expenditure, label=Type))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Food At Home expenditure in the U.S. by the final purchaser")) 

foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot <- animate(foodSales_Exp_FinalPurchaser_FAH_Nominal_animated_plot,  
                                                                  height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                                                  renderer = gifski_renderer("FAH-Expenditure_FinalPurchaser.gif"))

###### Monthly food sales data in million dollars


foodSales_Exp_Monthly <- read_excel("Data/FoodExpenditures/MonthlySales_TaxesTips.xlsx") %>% as.data.frame()

names(foodSales_Exp_Monthly) <- c("Year", "Month", "FAH_NOM", "FAFH_NOM", "TOT_NOM", 
                                  "FAH_CONS", "FAFH_CONS", "TOT_CONS")
foodSales_Exp_Monthly <- foodSales_Exp_Monthly[-(1:4),]

foodSales_Exp_Monthly_NOM <- sapply(foodSales_Exp_Monthly %>% 
                                      select(Year, FAH_NOM, FAFH_NOM), as.numeric) %>% as.data.frame()
foodSales_Exp_Monthly_NOM <- foodSales_Exp_Monthly_NOM %>% transmute(Year = Year, Month = foodSales_Exp_Monthly$Month,
                                                                     FAH = FAH_NOM, FAFH = FAFH_NOM)

foodSales_Exp_Monthly_NOM_FAH <- foodSales_Exp_Monthly_NOM %>% select(-FAFH)
foodSales_Exp_Monthly_NOM_FAFH <- foodSales_Exp_Monthly_NOM %>% select(-FAH)

foodSales_Exp_Monthly_NOM_FAH_plot <- foodSales_Exp_Monthly_NOM_FAH %>% 
  ggplot(aes(x=Year, y=FAH, color = Month)) + geom_line()

foodSales_Exp_Monthly_NOM_FAH_animated_plot <- foodSales_Exp_Monthly_NOM_FAH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Exp_Monthly_NOM_FAH_animated_plot <- foodSales_Exp_Monthly_NOM_FAH_animated_plot + theme_light(base_size = 16)

foodSales_Exp_Monthly_NOM_FAH_animated_plot <- foodSales_Exp_Monthly_NOM_FAH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                                                         panel.grid.minor = element_blank())

foodSales_Exp_Monthly_NOM_FAH_animated_plot <- foodSales_Exp_Monthly_NOM_FAH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=FAH, label=Month))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Food At Home expenditure in the U.S. by month"))

foodSales_Exp_Monthly_NOM_FAH_animated_plot <- animate(foodSales_Exp_Monthly_NOM_FAH_animated_plot,  
                                                                  height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                                                  renderer = gifski_renderer("FAH-Expenditure_Month.gif"))

foodSales_Exp_Monthly_NOM_FAFH_plot <- foodSales_Exp_Monthly_NOM_FAFH %>% 
  ggplot(aes(x=Year, y=FAFH, color = Month)) + geom_line()

foodSales_Exp_Monthly_NOM_FAFH_animated_plot <- foodSales_Exp_Monthly_NOM_FAFH_plot + geom_point(size=2) + transition_reveal(Year)

foodSales_Exp_Monthly_NOM_FAFH_animated_plot <- foodSales_Exp_Monthly_NOM_FAFH_animated_plot + theme_light(base_size = 16)

foodSales_Exp_Monthly_NOM_FAFH_animated_plot <- foodSales_Exp_Monthly_NOM_FAFH_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                                                   panel.grid.minor = element_blank())

foodSales_Exp_Monthly_NOM_FAFH_animated_plot <- foodSales_Exp_Monthly_NOM_FAFH_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=FAFH, label=Month))+ 
  labs(x="Year", y="Million dollars")+
  ggtitle(paste0("Food Away From Home expenditure in the U.S. by month"))

foodSales_Exp_Monthly_NOM_FAFH_animated_plot <- animate(foodSales_Exp_Monthly_NOM_FAFH_animated_plot,  
                                                       height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                                       renderer = gifski_renderer("FAFH-Expenditure_Month.gif"))










######################################################################################################################################
################################################### FOOD Availability ################################################################
######################################################################################################################################

################################################## Dairy #################################################################

#### With the following code we can read all the sheets in the excel file. 
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
allDairyAvailability<- lapply(excel_sheets(path), read_excel, path = path)

allDairy <- allDairyAvailability[[2]]


#### All the data are measured in pounds. So the supply and disappearence numbers are in million pounds
#### The percapita numbers are in pounds.

cheese_tot <- allDairyAvailability[[4]] %>% as.data.frame()
names(cheese_tot) <- c("Year", "U.S.Populatin_million", "Production", "Imports", "BeginingStocks",
                       "TotalSupply", "Exports", "Ship_U.S_Territories", "EndingStocks",
                       "FoodAvail_USDA_Donations", "FoodAvail_Total_Not_Including_USDA_donations",
                       "FoodAvail_Total_Including_USDA_donations", "Percapita")
cheese_tot <- cheese_tot[-(1:6),]
cheese_tot <- cheese_tot %>% as.numeric()
cheese_tot <- sapply(cheese_tot, as.numeric) 
cheese_tot <- round(cheese_tot,4) %>% as.data.frame()


cheese_tot <- allDairyAvailability[[4]] %>% as.data.frame()
names(cheese_tot) <- c("Year", "U.S.Populatin_million", "Production", "Imports", "BeginingStocks",
                       "TotalSupply", "Exports", "Ship_U.S_Territories", "EndingStocks",
                       "FoodAvail_USDA_Donations", "FoodAvail_Total_Not_Including_USDA_donations",
                       "FoodAvail_Total_Including_USDA_donations", "Percapita")
cheese_tot <- cheese_tot[-(1:6),]
# cheese_tot <- cheese_tot %>% as.numeric()
cheese_tot <- sapply(cheese_tot, as.numeric) 
cheese_tot <- round(cheese_tot,4) %>% as.data.frame()


cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_1 <- cheese_percap_1[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
                            "Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type", 
                            "Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type", 
                            "Swiss", "Brick", "Muenster", "Cream_Neufchatel",
                            "Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
                            "Consumed_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
                            "CheeseContant")

cheese_percap_1 <- sapply(cheese_percap_1, as.numeric) %>% as.data.frame()
cheese_percap_1 <- round(cheese_percap_1,4) %>% select(-"NA")
cheese_percap_1 <- cheese_percap_1 %>% filter(Year<=1994)

cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
names(cheese_percap_2) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
                            "Total_USA_Type", "Mozzarella_Itl_Type", "Other_Itl_Type", "Total_Itl_Type", 
                            "Swiss", "Brick", "Muenster", "Cream_Neufchatel","Blue", "Hispanic", "Other", 
                            "Total", "Total_OtherThan_American_NonCowCheese(Excl)", "Imported_Cheese_NotCows",
                            "Nat_Cheese_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", 
                            "Total_Processed_Cheese")
cheese_percap_2 <- sapply(cheese_percap_2, as.numeric) %>% as.data.frame()
cheese_percap_2 <- round(cheese_percap_2,4) %>% select(-"NA")
cheese_percap_2 <- cheese_percap_2 %>% filter(Year<=2019)


cheese_percap_1 <- cheese_percap_1 %>% mutate(
  Other_Itl_Type = Provolone_Itl_Type + Romano_Itl_Type + Parmesan_Itl_Type + Ricotta_Itl_Type + Other_Itl_Type) %>% 
  select(-Provolone_Itl_Type, - Romano_Itl_Type, - Parmesan_Itl_Type, - Ricotta_Itl_Type)

##### cheese_percap contains all the available cheese per capita in the U.S.
cheese_percap <- bind_rows(cheese_percap_1, cheese_percap_2)

### I will subset the above data frame to get the columns that have all data.
cheese_percap_subset <- cheese_percap %>% select(Year, Cheddar_USA_Type, Other_USA_Type, Mozzarella_Itl_Type, Other_Itl_Type,
                                                 Swiss, Brick, Muenster, Cream_Neufchatel, Blue, Hispanic, Processed_Cheese, 
                                                 FoodSpreads_Cheese)

## Now I convert the data from wide to long. Working woth long data is easier for visualization 
cheese_percap_subset <- cheese_percap_subset %>% gather(CheeseType, PerCapitaAvail, -c(Year))

require(gganimate)
require(magick)

cheese_percap_plot <- cheese_percap_subset %>% 
  ggplot(aes(x=Year, y=PerCapitaAvail,color=CheeseType)) + geom_line() + 
  labs(x="Year", y="Cheese Available Per Capita (in pounds)")

cheese_animated_plot <- cheese_percap_plot + geom_point(size=2) + transition_reveal(Year)

cheese_animated_plot <- cheese_animated_plot + theme_light(base_size = 16)

cheese_animated_plot <- cheese_animated_plot + theme(panel.grid.major = element_blank(), 
                                                     panel.grid.minor = element_blank())

cheese_animated_plot <- cheese_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=PerCapitaAvail, label=CheeseType))+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Cheese Available (Per Capita) in the U.S.")) 

cheese_animation <- animate(cheese_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                            renderer = gifski_renderer("CheeseAnimation.gif"))

# cheese_animation <- animate(cheese_animated_plot, fps = 20, renderer=magick_renderer())
# image_write_gif(cheese_animation, 'CheeseAnimation.gif')

### Frozen dairy products availability total and per capita. IC = Ice Cream, PCC = Per Capita, Tot = Total
### Totals are in million pounds. per capitas are in pounds

frozenDairy <- allDairyAvailability[[12]] %>% as.data.frame()

frozenDairy <- frozenDairy[-(1:5),]
names(frozenDairy) <- c("Year", "U.S.Pop_million", "RegIC_Tot", "RegIC_PCC",
                        "LowFatIC_Tot", "LowFatIC_PCC", "NonFatIC_Tot", "NonFatIC_PCC",
                        "Sherbet_Tot", "Sherbet_PCC", "MellorineMix_Total", "MellorineMix_PCC",
                        "FroYo_Tot", "FroYo_PCC", "WaterJuice_Tot", "WaterJuice_PCC", "Other_Tot",
                        "Other_PCC", "TotFrozenDairy_Tot", "TotFrozenDairy_PCC", "NA", "NA1")

frozenDairy <- sapply(frozenDairy, as.numeric) %>% as.data.frame()
frozenDairy <- round(frozenDairy,4) %>% select(-"NA", -"NA1", -"WaterJuice_Tot", -"WaterJuice_PCC")

frozenDairy <- frozenDairy %>% filter(Year<=2019)


frozenDairy_totals <- frozenDairy %>% select(Year, RegIC_Tot, LowFatIC_Tot, NonFatIC_Tot,
                                             Sherbet_Tot, MellorineMix_Total, FroYo_Tot)
names(frozenDairy_totals) <- c("Year", "Reg IceCream", "Low Fat IceCream", "Non Fat IceCream", "Sherbet", 
                               "Mellorine Mix", "FroYo")
frozenDairy_totals <- frozenDairy_totals %>% gather(Type, Pounds, -Year)

frozenDairy_plot <- frozenDairy_totals %>% ggplot(aes(x = Year, y = Pounds, color = Type)) + geom_line()

frozenDairy_animated_plot <- frozenDairy_plot + geom_point(size=2) + transition_reveal(Year)

frozenDairy_animated_plot <- frozenDairy_animated_plot + theme_light(base_size = 16)

frozenDairy_animated_plot <- frozenDairy_animated_plot + theme(panel.grid.major = element_blank(), 
                                                     panel.grid.minor = element_blank())

frozenDairy_animated_plot <- frozenDairy_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Pounds, label=Type))+ 
  labs(x="Year", y="Pounds")+
  ggtitle("Frozen Dairy Available in the U.S. (million pounds)") 

frozenDairy_animation <- animate(frozenDairy_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                 renderer = gifski_renderer("frozenDairyAnimation.gif"))





################################################## MEAT #################################################################

#### With the following code we can read all the sheets in the excel file. 
meatPath <- "Data/FoodAvailabilityData/RedMeatPoultryFish.xlsx"
allmeatAvailability<- lapply(excel_sheets(meatPath), read_excel, path = meatPath)


#### The data are for per capita and are in pounds(carcass weight)

meatCarcass <- allmeatAvailability[[2]] %>% as.data.frame()
names(meatCarcass) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
                        "Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Total_Meat_PCC")
meatCarcass <- meatCarcass[-(1:5),]

meatCarcass <- sapply(meatCarcass, as.numeric) %>% as.data.frame()
meatCarcass <- round(meatCarcass,4)


#### The data are for per capita and are in pounds(retail weight)
meatRetail <- allmeatAvailability[[3]] %>% as.data.frame()
names(meatRetail) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
                        "YoungChicken_PCC", "OtherChicken_PCC", "Total_Chicken")
meatRetail <- meatRetail[-(1:5),]

meatRetail <- sapply(meatRetail, as.numeric) %>% as.data.frame()
meatRetail <- round(meatRetail,4)

#### The data are for per capita and are in pounds(Boneless weight)
meatBoneless <- allmeatAvailability[[4]] %>% as.data.frame()
names(meatBoneless) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
                       "Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Fish_ShellFish_PCC", "Total_Meat_PCC")
meatBoneless <- meatBoneless[-(1:5),]

meatBoneless <- sapply(meatBoneless, as.numeric) %>% as.data.frame()
meatBoneless <- round(meatBoneless,4)

#### I am only getting per capita availability of boneless meat
meatBoneless_subset <- meatBoneless %>% transmute(Year = Year, Population = U.S.Pop_million, Beef = Beef_PCC, Veal = Veal_PCC, 
                                                  Pork = Pork_PCC, Lamb = Lamb_PCC, Chicken = Chicken_PCC, 
                                                  Fish = Fish_ShellFish_PCC) %>% filter(Year <= 2019)

meatBoneless_long <- meatBoneless_subset %>% select(-Population) %>% gather(Type, Value, -Year)

meatBoneless_plot <- meatBoneless_long %>% ggplot(aes(x=Year, y=Value, color = Type)) + geom_line()

meatBoneless_animated_plot <- meatBoneless_plot + geom_point(size=2) + transition_reveal(Year)

meatBoneless_animated_plot <- meatBoneless_animated_plot + theme_light(base_size = 16)

meatBoneless_animated_plot <- meatBoneless_animated_plot + theme(panel.grid.major = element_blank(), 
                                                     panel.grid.minor = element_blank())

meatBoneless_animated_plot <- meatBoneless_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Value, label=Type))+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Meat Available (Per Capita) in the U.S. ")) 

meatBoneless_animated_plot <- animate(meatBoneless_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                      renderer = gifski_renderer("BonelessMeatAnimation.gif"))






#### Leading Meat(Boneless weight)
meatLeading <- allmeatAvailability[[5]] %>% as.data.frame()
names(meatLeading) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Pork_PCC",
                         "Chicken_PCC", "Total_LeadingMeat_PCC")
meatLeading <- meatLeading[-(1:5),]

meatLeading <- sapply(meatLeading, as.numeric) %>% as.data.frame()
meatLeading <- round(meatLeading,4) %>% filter(Year<=2019)

leadingMeat_Long <- meatLeading %>% select(-U.S.Pop_million, -Total_LeadingMeat_PCC)  %>% gather(Type,Value, -Year)

leadingMeat_plot <- leadingMeat_Long %>% ggplot(aes(x=Year, y = Value, color = Type)) + geom_line()

leadingMeat_animated_plot <- leadingMeat_plot + geom_point(size=2) + transition_reveal(Year)

leadingMeat_animated_plot <- leadingMeat_animated_plot + theme_light(base_size = 16)

leadingMeat_animated_plot <- leadingMeat_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                 panel.grid.minor = element_blank())

leadingMeat_animated_plot <- leadingMeat_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Value, label=Type))+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Leading Meat Available (Per Capita) in the U.S. ")) 

leadingMeat_animated_plot <- animate(leadingMeat_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                      renderer = gifski_renderer("LeadingMeatAnimation.gif"))





##########################################################
#################### FEED GRAINS ########################
##########################################################

### Corn data for every commodity market year

corn <- read_excel("Data/ProductionData/Feed_Grains_Excel_Corn.xlsx") %>% as.data.frame()

corn <- corn %>% select(Year, Attribute, Unit, Amount)
unique(corn$Attribute)

corn_prices <- corn %>% filter(Attribute=="Prices received by farmers")

corn_acerage <- corn %>% filter(Attribute=="Planted acreage")

corn_yield_acre <- corn %>% filter(Attribute == "Yield per harvested acre")


corn_use <- corn %>% filter(Attribute %in% c('Food, alcohol, and industrial use', 'Seed use',
                                             'Feed and residual use', 'High-fructose corn syrup (HFCS) use',
                                             'Glucose and dextrose use', 'Starch use', 
                                             'Alcohol for beverages and manufacturing use'))
corn_use <- corn_use %>% select(Year, Attribute, Amount)
corn_use <- corn_use %>% spread(Attribute, Amount)
names(corn_use) <- c('Year', 'Alcohol_Beverages_Manufacturing', 'Feed', 'Food_Alcohol_Industrial',
                     'Glucose_Dextrose', 'High-Fructose_Corn_Syrup', 'Seed', 'Starch')
corn_use <- corn_use %>% gather(Type, Value, -Year)

corn_use_plot <- corn_use %>% ggplot(aes(x = Year, y = Value, color = Type)) + geom_line()

corn_use_animated_plot <- corn_use_plot + geom_point(size=2) + transition_reveal(Year)

corn_use_animated_plot <- corn_use_animated_plot + theme_light(base_size = 16)

corn_use_animated_plot <- corn_use_animated_plot + theme(panel.grid.major = element_blank(), 
                                                               panel.grid.minor = element_blank())

corn_use_animated_plot <- corn_use_animated_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Value, label=Type))+ 
  labs(x="Year", y="Million bushels")+
  ggtitle(paste0("Corn use in the U.S.")) 
corn_use_animated_plot <- animate(corn_use_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                     renderer = gifski_renderer("CornUseAnimation.gif"))


corn_yield_acre_plot <- corn_yield_acre %>% ggplot(aes(x=Year, y=Amount)) + geom_line(colour="goldenrod3")
corn_yield_acre_animated_plot <- corn_yield_acre_plot + geom_point(size=2) + transition_reveal(Year)
corn_yield_acre_animated_plot <- corn_yield_acre_animated_plot + theme_light(base_size = 16)
corn_yield_acre_animated_plot <-corn_yield_acre_animated_plot + theme(panel.grid.major = element_blank(), 
                                                         panel.grid.minor = element_blank())
corn_yield_acre_animated_plot <- corn_yield_acre_animated_plot + theme(legend.position="none") + 
  labs(x="Year", y="Bushels")+
  ggtitle(paste0("Corn yield per harvested acre in the U.S.")) 
corn_yield_acre_animated_plot <- animate(corn_yield_acre_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                  renderer = gifski_renderer("CornYieldAnimation.gif"))


corn_acerage <- corn %>% filter(Attribute=="Planted acreage")
corn_acerage_plot <- corn_acerage %>% ggplot(aes(x=Year, y = Amount)) + geom_line(colour = "tan4")
corn_acerage_animated_plot <- corn_acerage_plot + geom_point(size=2) + transition_reveal(Year)
corn_acerage_animated_plot <- corn_acerage_animated_plot + theme_light(base_size = 16)
corn_acerage_animated_plot <- corn_acerage_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                      panel.grid.minor = element_blank())
corn_acerage_animated_plot <- corn_acerage_animated_plot + theme(legend.position="none") + 
  labs(x="Year", y="Planted acerage (Million acres)")+
  ggtitle(paste0("Corn planted acerage in the U.S.")) 
corn_acerage_animated_plot <- animate(corn_acerage_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                         renderer = gifski_renderer("CornAcerageAnimation.gif"))

corn_prices <- corn %>% filter(Attribute=="Prices received by farmers")
corn_prices_plot <- corn_prices %>% ggplot(aes(x = Year, y = Amount)) + geom_line(colour="springgreen4")
corn_prices_animated_plot <- corn_prices_plot + geom_point(size=2) + transition_reveal(Year)
corn_prices_animated_plot <- corn_prices_animated_plot + theme_light(base_size = 16)
corn_prices_animated_plot <- corn_prices_animated_plot + theme(panel.grid.major = element_blank(), 
                                                                 panel.grid.minor = element_blank())
corn_prices_animated_plot <- corn_prices_animated_plot + theme(legend.position="none") + 
  labs(x="Year", y="Price (Dollars per bushel)")+
  ggtitle(paste0("Corn price received by farmers in the U.S.")) 
corn_prices_animated_plot <- animate(corn_prices_animated_plot, height = 500, width = 1000,fps=6, start_pause=5, end_pause=20,
                                      renderer = gifski_renderer("CornPriceAnimation.gif"))

################################# Vegetables Availability #############

veggiesPath <- "Data/FoodAvailabilityData/FreshVegetables.xlsx"
allVeggiesAvailability<- lapply(excel_sheets(veggiesPath), read_excel, path = veggiesPath)

allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvailability[[2]]
allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvail_PCC_FarmWeight %>% as.data.frame()
allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvail_PCC_FarmWeight[-(1:2),]
allVeggiesAvail_PCC_FarmWeight <- sapply(allVeggiesAvail_PCC_FarmWeight, as.numeric) %>% as.data.frame()
allVeggiesAvail_PCC_FarmWeight <- round(allVeggiesAvail_PCC_FarmWeight,4)


#### These veggies are in pounds

#### I will take the major vegetables for the plot. Bell peppers, Broccoli, Cabbage, Carrots, Cauliflower,
#### Celery, Garlic, Kale, Lettuce head, Mushrooms, Onion, Potatoes, Spinach, Sweet Potatoes, Tomatoes.

# allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvail_PCC_FarmWeight %>% select(Year, `Bell peppers`, Broccoli,
#                                                                             Cabbage, Carrots, Cauliflower, Celery, Garlic,
#                                                                             Kale, `Lettuce head`, Mushrooms, Onions, Potatoes,
#                                                                             Spinach, `Sweet potatoes`, Tomatoes)

allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvail_PCC_FarmWeight %>% select(Year, `Bell peppers`, Broccoli,
                                                                            Carrots, Cauliflower,
                                                                            Kale, Mushrooms,
                                                                            Spinach, `Sweet potatoes`)


allVeggiesAvail_PCC_FarmWeight <- allVeggiesAvail_PCC_FarmWeight %>% gather(Vegetable, Availability, -Year)

allVeggiesAvail_PCC_FarmWeight_plot <- allVeggiesAvail_PCC_FarmWeight %>% ggplot(aes(x=Year, y = Availability, color = Vegetable)) + geom_line()

allVeggiesAvail_PCC_FarmWeight_plot <- allVeggiesAvail_PCC_FarmWeight_plot + geom_point(size=2) + transition_reveal(Year)

allVeggiesAvail_PCC_FarmWeight_plot <- allVeggiesAvail_PCC_FarmWeight_plot + theme_light(base_size = 16)

allVeggiesAvail_PCC_FarmWeight_plot <- allVeggiesAvail_PCC_FarmWeight_plot + theme(panel.grid.major = element_blank(), 
                                                         panel.grid.minor = element_blank())

allVeggiesAvail_PCC_FarmWeight_plot <- allVeggiesAvail_PCC_FarmWeight_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Availability, label=Vegetable))+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Vegetable Availability in the U.S.")) 

allVeggiesAvail_PCC_FarmWeight_plot <- animate(allVeggiesAvail_PCC_FarmWeight_plot, height = 500, width = 1000,fps=6, start_pause=5, 
                                               end_pause=20, renderer = gifski_renderer("VeggiesAvail.gif"))




allVeggiesAvail_PCC_Greens <- allVeggiesAvail_PCC_FarmWeight %>% select(Year, `Collard greens`, Kale, `Lettuce head`,
                                                                 `Romaine and leaf`, `Mustard greens`, Spinach,
                                                                 `Turnip greens`)
names(allVeggiesAvail_PCC_Greens) <- c("Year", "Collard Greens", "Kale", "Lettuce Head", "Romaine", "Mustard Greens", "Spinach",
                                       "Turnip Greens")

allVeggiesAvail_PCC_Greens <- allVeggiesAvail_PCC_Greens %>% gather(Vegetable, Availability, -Year)

allVeggiesAvail_PCC_Greens_plot <- allVeggiesAvail_PCC_Greens %>% ggplot(aes(x=Year, y = Availability, color = Vegetable)) + geom_line()

allVeggiesAvail_PCC_Greens_plot <- allVeggiesAvail_PCC_Greens_plot + geom_point(size=2) + transition_reveal(Year)

allVeggiesAvail_PCC_Greens_plot <- allVeggiesAvail_PCC_Greens_plot + theme_light(base_size = 16)

allVeggiesAvail_PCC_Greens_plot <- allVeggiesAvail_PCC_Greens_plot + theme(panel.grid.major = element_blank(), 
                                                                                   panel.grid.minor = element_blank())

allVeggiesAvail_PCC_Greens_Animated_plot <- allVeggiesAvail_PCC_Greens_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Availability, label=Vegetable), nudge_x =1, size=4, hjust=0)+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Percapita Leafy Greens Availability in the U.S."))

allVeggiesAvail_PCC_Greens_Animated_plot <- animate(allVeggiesAvail_PCC_Greens_Animated_plot, height = 500, width = 1000,fps=6, 
                                           start_pause=5, end_pause=20, renderer = gifski_renderer("VeggiesAvailGreen.gif"))




allVeggiesAvail_PCC_Cruciferous <- allVeggiesAvail_PCC_FarmWeight %>% select(Year, Cabbage, Cauliflower, Broccoli, `Brussels sprouts`)
names(allVeggiesAvail_PCC_Cruciferous) <- c("Year", "Cabbage", "Cauliflower", "Broccoli", "Brussels Sprouts")

allVeggiesAvail_PCC_Cruciferous <- allVeggiesAvail_PCC_Cruciferous %>% gather(Vegetable, Availability, -Year)

allVeggiesAvail_PCC_Cruciferous_plot <- allVeggiesAvail_PCC_Cruciferous %>% ggplot(aes(x=Year, y = Availability, color = Vegetable)) + geom_line()

allVeggiesAvail_PCC_Cruciferous_plot <- allVeggiesAvail_PCC_Cruciferous_plot + geom_point(size=2) + transition_reveal(Year)

allVeggiesAvail_PCC_Cruciferous_plot <- allVeggiesAvail_PCC_Cruciferous_plot + theme_light(base_size = 16)

allVeggiesAvail_PCC_Cruciferous_plot <- allVeggiesAvail_PCC_Cruciferous_plot + theme(panel.grid.major = element_blank(), 
                                                                           panel.grid.minor = element_blank())

allVeggiesAvail_PCC_Cruciferous_Animated_plot <- allVeggiesAvail_PCC_Cruciferous_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Availability, label=Vegetable), nudge_x =1, size=4, hjust=0)+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Percapita Cruciferous Vegetable Availability in the U.S."))

allVeggiesAvail_PCC_Cruciferous_Animated_plot <- animate(allVeggiesAvail_PCC_Cruciferous_Animated_plot, height = 500, width = 1000,fps=6, 
                                                    start_pause=5, end_pause=20, 
                                                    renderer = gifski_renderer("VeggiesAvailCruciferous.gif"))


allVeggiesAvail_PCC_Roots <- allVeggiesAvail_PCC_FarmWeight %>% select(Year, Carrots, Garlic, Onions, Potatoes, Radishes, `Sweet potatoes`)
names(allVeggiesAvail_PCC_Roots) <- c("Year", "Carrots", "Garlic", "Onions", "Potatoes", "Radishes", "Sweet Potatoes")

allVeggiesAvail_PCC_Roots <- allVeggiesAvail_PCC_Roots %>% gather(Vegetable, Availability, -Year)

allVeggiesAvail_PCC_Roots_plot <- allVeggiesAvail_PCC_Roots %>% ggplot(aes(x=Year, y = Availability, color = Vegetable)) + geom_line()

allVeggiesAvail_PCC_Roots_plot <- allVeggiesAvail_PCC_Roots_plot + geom_point(size=2) + transition_reveal(Year)

allVeggiesAvail_PCC_Roots_plot <- allVeggiesAvail_PCC_Roots_plot + theme_light(base_size = 16)

allVeggiesAvail_PCC_Roots_plot <- allVeggiesAvail_PCC_Roots_plot + theme(panel.grid.major = element_blank(), 
                                                                                     panel.grid.minor = element_blank())

allVeggiesAvail_PCC_Roots_Animated_plot <- allVeggiesAvail_PCC_Roots_plot + theme(legend.position="none") + 
  geom_label(aes(x = Year, y=Availability, label=Vegetable), nudge_x =1, size=4, hjust=0)+ 
  labs(x="Year", y="Pounds")+
  ggtitle(paste0("Percapita Roots Vegetable Availability in the U.S."))

allVeggiesAvail_PCC_Roots_Animated_plot <- animate(allVeggiesAvail_PCC_Roots_Animated_plot, height = 500, width = 1000,fps=6, 
                                                         start_pause=5, end_pause=20, 
                                                         renderer = gifski_renderer("VeggiesAvailRoots.gif"))

gifski_renderer(allVeggiesAvail_PCC_Roots_Animated_plot)
############### ANIMAL STATS



xyz <- animate(allVeggiesAvail_PCC_Roots_Animated_plot, height = 500, width = 1000,fps=6, 
        start_pause=5, end_pause=20)

ggplotly(xyz)




