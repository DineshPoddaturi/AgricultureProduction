######################################################################################################################################
foodSales_Exp_Nominal <- read_excel("Data/FoodExpenditures/Nominal_Food_Alcohol_Expenditures_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_Nominal%>% glimpse()
foodSales_Exp_Nominal_No_TaxTip <- read_excel("Data/FoodExpenditures/Nominal_Food_Alcohol_Expenditures_No_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_Nominal_No_TaxTip <- read_excel("Data/FoodExpenditures/Nominal_FoodAlcohol_Expenditure_No_TaxesTips.xlsx") %>% as.data.frame()
read_excel("Data/FoodExpenditures/Nominal_FoodAlcohol_Expenditure_No_TaxesTips.xlsx")
getwd
getwd()
######################################################################################################################################
################################################### FOOD Expenditures ################################################################
######################################################################################################################################
foodSales_Exp_Nominal <- read_excel("Data/FoodExpenditures/Nominal_Food_Alcohol_Expenditures_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_Nominal_No_TaxTip <- read_excel("Data/FoodExpenditures/Nominal_FoodAcohol_Expenditure_No_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_Nominal_No_TaxTip
Nominal_FoodAcohol_Expenditure_No_TaxesTips %>% glimpse()
foodSales_Exp_Nominal_No_TaxTip %>% glimpse()
#### For constant dollar series the expenditure is normalized as [Millions of dollars (1988=100)]
foodSales_Exp_ConstantDollar <- read_excel("Data/FoodExpenditures/Constant_Food_Alcohol_Expenditures_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_ConstantDollar_No_TaxTip <- read_excel("Data/FoodExpenditures/Constant_FoodAcohol_Expenditure_No_TaxesTips.xlsx") %>% as.data.frame()
foodSales_Exp_ConstantDollar
foodSales_Exp_ConstantDollar_No_TaxTip
#### This following is by the final purchaser
foodSales_Exp_FinalPurchaser <- read_excel("Data/FoodExpenditures/food_expenditures_final_purchaser.xlsx") %>% as.data.frame()
foodSales_Exp_FinalPurchaser
path <- readxl_example("Data/FoodAvailabilityData/DairyProducts.xlsx")
readxl_example("Data/FoodAvailabilityData/DairyProducts.xlsx")
excel_sheets(readxl_example("Data/FoodAvailabilityData/DairyProducts.xlsx"))
excel_sheets(readxl_example("DairyProducts.xlsx"))
path <- read_excel("Data/FoodAvailabilityData/DairyProducts.xlsx")
path
lapply(excel_sheets(path), read_excel, path = path)
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
lapply(excel_sheets(path), read_excel, path = path)
#### With the following code we can read all the sheets in the excel file.
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
allDairyAvailability<- lapply(excel_sheets(path), read_excel, path = path)
allDairyAvailability
allDairyAvailability[[1]]
allDairyAvailability[[2]]
allDairy <- allDairyAvailability[[2]]
allDairy
cheese_tot <- allDairyAvailability[[4]]
cheese_tot
cheese_tot <- allDairyAvailability[[4]]
cheese_tot
#### With the following code we can read all the sheets in the excel file.
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
allDairyAvailability<- lapply(excel_sheets(path), read_excel, path = path)
allDairy <- allDairyAvailability[[2]]
cheese_tot <- allDairyAvailability[[4]]
library(tidyverse)
library(readxl)
library(lubridate)
#### With the following code we can read all the sheets in the excel file.
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
allDairyAvailability<- lapply(excel_sheets(path), read_excel, path = path)
allDairy <- allDairyAvailability[[2]]
cheese_tot <- allDairyAvailability[[4]]
cheese_tot
cheese_tot <- allDairyAvailability[[4]] %>% as.data.frame()
cheese_tot
cheese_tot %>% glimpse()
names(cheese_tot) <- c("Year", "U.S.Populatin_million", "Production", "Imports", "BeginingStocks",
"TotalSupply", "Exports", "Ship_U.S_Territories", "EndingStocks",
"FoodAvail_USDA_Donations", "FoodAvail_Total_Not_Including_USDA_donations",
"FoodAvail_Total_Including_USDA_donations", "Percapita")
cheese_tot
cheese_tot %>% head()
cheese_tot[-(1:6),] %>% head()
cheese_tot <- cheese_tot[-(1:6),]
cheese_tot
cheese_tot <- cheese_tot %>% as.numeric()
cheese_tot
cheese_tot <- sapply(cheese_tot, as.numeric )
cheese_tot
cheese_tot <- sapply(cheese_tot, as.numeric) %>% round(cheese_tot,3)
cheese_tot <- round(cheese_tot,4)
cheese_tot
cheese_tot <- round(cheese_tot,4) %>% as.data.frame()
cheese_tot
names(allDairyAvailability)
allDairyAvailability
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2
cheese_percap_2 %>% head()
cheese_percap_2[(1:4),]
cheese_percap_2[5,]
cheese_percap_2[-(1:4),]
#### With the following code we can read all the sheets in the excel file.
path <- "Data/FoodAvailabilityData/DairyProducts.xlsx"
allDairyAvailability<- lapply(excel_sheets(path), read_excel, path = path)
allDairy <- allDairyAvailability[[2]]
cheese_tot <- allDairyAvailability[[4]] %>% as.data.frame()
names(cheese_tot) <- c("Year", "U.S.Populatin_million", "Production", "Imports", "BeginingStocks",
"TotalSupply", "Exports", "Ship_U.S_Territories", "EndingStocks",
"FoodAvail_USDA_Donations", "FoodAvail_Total_Not_Including_USDA_donations",
"FoodAvail_Total_Including_USDA_donations", "Percapita")
cheese_tot <- cheese_tot[-(1:6),]
cheese_tot <- cheese_tot %>% as.numeric()
cheese_tot <- sapply(cheese_tot, as.numeric)
cheese_tot <- round(cheese_tot,4) %>% as.data.frame()
cheese_tot <- allDairyAvailability[[4]] %>% as.data.frame()
names(cheese_tot) <- c("Year", "U.S.Populatin_million", "Production", "Imports", "BeginingStocks",
"TotalSupply", "Exports", "Ship_U.S_Territories", "EndingStocks",
"FoodAvail_USDA_Donations", "FoodAvail_Total_Not_Including_USDA_donations",
"FoodAvail_Total_Including_USDA_donations", "Percapita")
cheese_tot <- cheese_tot[-(1:6),]
cheese_tot <- cheese_tot %>% as.numeric()
cheese_tot <- sapply(cheese_tot, as.numeric)
cheese_tot <- round(cheese_tot,4) %>% as.data.frame()
cheese_tot
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2[-(1:4),]
cheese_percap_2[-(1:4),] %>% as.numeric()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
cheese_percap_1
cheese_percap_1 <- cheese_percap_1[-(1:4),]
cheese_percap_1
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_1 <- cheese_percap_1[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1
cheese_percap_1
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1
cheese_percap_1 %>% select(-"NA")
cheese_percap_1 <- cheese_percap_1 %>% select(-"NA")
cheese_percap_1
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "Total_OtherThan_American_Non-cowCheese(Excl)",
"Imported_Cheese_NotCows",
"Nat_Cheese_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese")
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_1 <- cheese_percap_1[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1 <- cheese_percap_1 %>% select(-"NA")
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
names(cheese_percap_2) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "Total_OtherThan_American_Non-cowCheese(Excl)",
"Imported_Cheese_NotCows",
"Nat_Cheese_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese")
cheese_percap_2
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
names(cheese_percap_2) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Mozzarella_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel","Blue", "Hispanic", "Other",
"Total", "Total_OtherThan_American_NonCowCheese(Excl)", "Imported_Cheese_NotCows",
"Nat_Cheese_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese",
"Total_Processed_Cheese")
cheese_percap_2
cheese_percap_2 %>% select(-"NA")
cheese_percap_2 <- cheese_percap_2 %>% select(-"NA")
cheese_percap_2 <- cheese_percap_2 %>% select(-"NA")
cheese_percap_1 %>% mutate(
Other_Itl_Type = Provolone_Itl_Type + Romano_Itl_Type + Parmesan_Itl_Type + Ricotta_Itl_Type + Other_Itl_Type) %>%
select(-Provolone_Itl_Type, - Romano_Itl_Type, - Parmesan_Itl_Type, - Ricotta_Itl_Type)
cheese_percap_1 <- sapply(cheese_percap_1, as.numeric) %>% as.data.frame()
cheese_percap_1
cheese_percap_1 <- round(cheese_percap_1,4) %>% select(-"NA")
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_1 <- cheese_percap_1[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1 <- sapply(cheese_percap_1, as.numeric) %>% as.data.frame()
cheese_percap_1 <- round(cheese_percap_1,4) %>% select(-"NA")
cheese_percap_1
cheese_percap_2 <- allDairyAvailability[[8]] %>% as.data.frame()
cheese_percap_2 <- cheese_percap_2[-(1:4),]
names(cheese_percap_2) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Mozzarella_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel","Blue", "Hispanic", "Other",
"Total", "Total_OtherThan_American_NonCowCheese(Excl)", "Imported_Cheese_NotCows",
"Nat_Cheese_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese",
"Total_Processed_Cheese")
cheese_percap_2 <- sapply(cheese_percap_2, as.numeric) %>% as.data.frame()
cheese_percap_2 <- round(cheese_percap_2,4) %>% select(-"NA")
cheese_percap_1 %>% mutate(
Other_Itl_Type = Provolone_Itl_Type + Romano_Itl_Type + Parmesan_Itl_Type + Ricotta_Itl_Type + Other_Itl_Type) %>%
select(-Provolone_Itl_Type, - Romano_Itl_Type, - Parmesan_Itl_Type, - Ricotta_Itl_Type)
1.1876+0.8607
cheese_percap_2
cheese_percap_1
cheese_percap_1 <- cheese_percap_1 %>% filter(Year>=1994)
cheese_percap_1
cheese_percap_1 <- allDairyAvailability[[7]] %>% as.data.frame()
cheese_percap_1 <- cheese_percap_1[-(1:4),]
names(cheese_percap_1) <- c("Year", "U.S.Pop_million", "Cheddar_USA_Type", "Other_USA_Type",
"Total_USA_Type", "Provolone_Itl_Type", "Romano_Itl_Type", "Parmesan_Itl_Type",
"Mozzarella_Itl_Type","Ricotta_Itl_Type", "Other_Itl_Type", "Total_Itl_Type",
"Swiss", "Brick", "Muenster", "Cream_Neufchatel",
"Blue", "Hispanic", "Other", "Total", "ConsumedAs_Nat_Cheese", "ConsumedAs_Processed_Cheese",
"Consumed_Total", "NA","Processed_Cheese", "FoodSpreads_Cheese", "Total_Processed_Cheese",
"CheeseContant")
cheese_percap_1 <- sapply(cheese_percap_1, as.numeric) %>% as.data.frame()
cheese_percap_1 <- round(cheese_percap_1,4) %>% select(-"NA")
cheese_percap_1 <- cheese_percap_1 %>% filter(Year<=1994)
cheese_percap_1
cheese_percap_2
cheese_percap_2 <- cheese_percap_2 %>% filter(Year<=2019)
cheese_percap_2
names(cheese_percap_2)
names(cheese_percap_1)
merge(cheese_percap_1, cheese_percap_2)
cheese_percap_1 <- cheese_percap_1 %>% mutate(
Other_Itl_Type = Provolone_Itl_Type + Romano_Itl_Type + Parmesan_Itl_Type + Ricotta_Itl_Type + Other_Itl_Type) %>%
select(-Provolone_Itl_Type, - Romano_Itl_Type, - Parmesan_Itl_Type, - Ricotta_Itl_Type)
cheese_percap_1
names(cheese_percap_1)
names(cheese_percap_2)
names(cheese_percap_1)
inner_join(cheese_percap_1, cheese_percap_2)
rbind.fill(cheese_percap_1, cheese_percap_2)
?rbind.fill
?bind_rows
bind_rows(cheese_percap_1, cheese_percap_2)
bind_rows(cheese_percap_1, cheese_percap_2) %>% select(Year)
cheese_percap <- bind_rows(cheese_percap_1, cheese_percap_2)
cheese_percap
names(cheese_percap)
frozenDairy <- allDairyAvailability[[12]] %>% as.data.frame()
frozenDairy
cheese_percap
foodSales_monthly
rownames(foodSales_monthly) <- 1:nrow(foodSales_monthly)
foodSales_monthly
frozenDairy
frozenDairy %>% head()
frozenDairy <- frozenDairy[-(1:5),]
frozenDairy %>% head()
names(frozenDairy) <- c("Year", "U.S.Pop_million", "RegIC_Tot", "RegIC_PCC",
"LowFatIC_Tot", "LowFatIC_PCC", "NonFatIC_Tot", "NonFatIC_PCC",
"Sherbet_Tot", "Sherbet_PCC", "MellorineMix_Total", "MellorineMix_PCC",
"FroYo_Tot", "FroYo_PCC", "WaterJuice_Tot", "WaterJuice_PCC", "Other_Tot",
"Other_PCC", "TotFrozenDairy_Tot", "TotFrozenDairy_PCC")
frozenDairy
frozenDairy <- sapply(frozenDairy, as.numeric) %>% as.data.frame()
frozenDairy
frozenDairy <- round(frozenDairy,4) %>% select(-"NA")
frozenDairy <- allDairyAvailability[[12]] %>% as.data.frame()
frozenDairy <- frozenDairy[-(1:5),]
names(frozenDairy) <- c("Year", "U.S.Pop_million", "RegIC_Tot", "RegIC_PCC",
"LowFatIC_Tot", "LowFatIC_PCC", "NonFatIC_Tot", "NonFatIC_PCC",
"Sherbet_Tot", "Sherbet_PCC", "MellorineMix_Total", "MellorineMix_PCC",
"FroYo_Tot", "FroYo_PCC", "WaterJuice_Tot", "WaterJuice_PCC", "Other_Tot",
"Other_PCC", "TotFrozenDairy_Tot", "TotFrozenDairy_PCC", "NA", "NA1")
frozenDairy
frozenDairy <- sapply(frozenDairy, as.numeric) %>% as.data.frame()
round(frozenDairy,4) %>% select(-"NA", -"NA1")
frozenDairy <- round(frozenDairy,4) %>% select(-"NA", -"NA1")
frozenDairy
frozenDairy <- allDairyAvailability[[12]] %>% as.data.frame()
frozenDairy <- frozenDairy[-(1:5),]
names(frozenDairy) <- c("Year", "U.S.Pop_million", "RegIC_Tot", "RegIC_PCC",
"LowFatIC_Tot", "LowFatIC_PCC", "NonFatIC_Tot", "NonFatIC_PCC",
"Sherbet_Tot", "Sherbet_PCC", "MellorineMix_Total", "MellorineMix_PCC",
"FroYo_Tot", "FroYo_PCC", "WaterJuice_Tot", "WaterJuice_PCC", "Other_Tot",
"Other_PCC", "TotFrozenDairy_Tot", "TotFrozenDairy_PCC", "NA", "NA1")
frozenDairy <- sapply(frozenDairy, as.numeric) %>% as.data.frame()
frozenDairy <- round(frozenDairy,4) %>% select(-"NA", -"NA1", -"WaterJuice_Tot", -"WaterJuice_PCC")
frozenDairy
names(frozenDairy)
rm(list=ls())
# If a package is installed, it will be loaded. If any are not, the missing package(s) will be installed
# from CRAN and then loaded.
pacman::p_load(tidyverse,lubridate,RColorBrewer,scales,gganimate)
# Read data
data <- read.csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
data
df <- data %>%
select(location,date,total_deaths_per_million,new_deaths_smoothed_per_million,new_deaths_per_million,new_cases_smoothed_per_million,total_cases_per_million,hosp_patients_per_million,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred) %>%
mutate(date = ymd(date))
dmin<- "2020-02-01"
dmax<- "2021-04-19"
# Make US plot
plot_US_animate <- data %>%
select(location,date,total_deaths,new_deaths_smoothed,new_deaths,new_cases_smoothed,total_cases,hosp_patients,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred) %>%
mutate(date = ymd(date)) %>%
filter(location %in% c("United States")) %>%
filter(date>=as_date(dmin)&date<=as_date(dmax)) %>%
rename(cases=new_cases_smoothed,deaths=new_deaths_smoothed,deathstoday=new_deaths,hospital=hosp_patients,vaccines=people_fully_vaccinated_per_hundred) %>%
select(date,cases,hospital,deaths,deathstoday,vaccines) %>%
mutate(deaths=deaths) %>%
mutate(deathstoday=deathstoday) %>%
mutate(hospital=hospital/50) %>%
mutate(vaccines=vaccines*100) %>%
pivot_longer(-date,names_to="variable") %>%
mutate(date=as_date(ifelse(variable=="hospital",date-0,date))) %>%
mutate(date=as_date(ifelse(variable=="deaths",date,date))) %>%
pivot_wider(names_from = variable,values_from=value) %>%
drop_na(deaths) %>%
ggplot(aes(x = date))+
geom_line(aes(y=`vaccines`),size=1.5,color="blue") +
geom_line(aes(y=`deaths`),size=1.5,color="black") +
geom_text(aes(label=paste0(floor(`vaccines`/10)/10,"% \n Fully Vaccinated"),x=date,y=`vaccines`+200),
position=position_nudge(0.1), color="blue", size=7, hjust=0.6, show.legend=FALSE) +
geom_text(aes(label=sprintf("%1.0f",deaths),x=date,y=deaths),
position=position_nudge(0.1), color="black", size=8, hjust=-0.2, show.legend=FALSE) +
transition_reveal(date) +
labs(x = "Date")+
ggtitle(paste0("US COVID-19 Daily Deaths"))+
theme_minimal() +
scale_y_continuous(name = "Ave. Daily Deaths",breaks= pretty_breaks(),limits = c(0, NA) ) +
scale_x_date(labels = date_format("%b-%y")) +
theme(axis.title.y = element_text(color = "black", size=24),
axis.text.y=element_text(colour="black"),
plot.title = element_text(hjust = 0.5,size=36),
text = element_text(size=24))
animate(plot_US_animate,height = 500, width = 1000,fps=5,start_pause=5,end_pause=20)
anim_save("covid.gif")
animate(plot_US_animate,height = 500, width = 1000,fps=5,start_pause=5,end_pause=20)
anim_save("covid.gif")
df
df <- data %>%
select(location,date,total_deaths_per_million,new_deaths_smoothed_per_million,new_deaths_per_million,new_cases_smoothed_per_million,total_cases_per_million,hosp_patients_per_million,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred) %>%
mutate(date = ymd(date))
df <- data %>%
select(location,date,total_deaths_per_million,new_deaths_smoothed_per_million,
new_deaths_per_million,new_cases_smoothed_per_million,total_cases_per_million,
hosp_patients_per_million,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred)
dmin<- "2020-02-01"
dmax<- "2021-04-19"
# Make US plot
plot_US_animate <- data %>%
select(location,date,total_deaths,new_deaths_smoothed,new_deaths,new_cases_smoothed,total_cases,hosp_patients,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred) %>%
mutate(date = ymd(date)) %>%
filter(location %in% c("United States")) %>%
filter(date>=as_date(dmin)&date<=as_date(dmax)) %>%
rename(cases=new_cases_smoothed,deaths=new_deaths_smoothed,deathstoday=new_deaths,hospital=hosp_patients,vaccines=people_fully_vaccinated_per_hundred) %>%
select(date,cases,hospital,deaths,deathstoday,vaccines) %>%
mutate(deaths=deaths) %>%
mutate(deathstoday=deathstoday) %>%
mutate(hospital=hospital/50) %>%
mutate(vaccines=vaccines*100) %>%
pivot_longer(-date,names_to="variable") %>%
mutate(date=as_date(ifelse(variable=="hospital",date-0,date))) %>%
mutate(date=as_date(ifelse(variable=="deaths",date,date))) %>%
pivot_wider(names_from = variable,values_from=value) %>%
drop_na(deaths) %>%
ggplot(aes(x = date))+
geom_line(aes(y=`vaccines`),size=1.5,color="blue") +
geom_line(aes(y=`deaths`),size=1.5,color="black") +
geom_text(aes(label=paste0(floor(`vaccines`/10)/10,"% \n Fully Vaccinated"),x=date,y=`vaccines`+200),
position=position_nudge(0.1), color="blue", size=7, hjust=0.6, show.legend=FALSE) +
geom_text(aes(label=sprintf("%1.0f",deaths),x=date,y=deaths),
position=position_nudge(0.1), color="black", size=8, hjust=-0.2, show.legend=FALSE) +
transition_reveal(date) +
labs(x = "Date")+
ggtitle(paste0("US COVID-19 Daily Deaths"))+
theme_minimal() +
scale_y_continuous(name = "Ave. Daily Deaths",breaks= pretty_breaks(),limits = c(0, NA) ) +
scale_x_date(labels = date_format("%b-%y")) +
theme(axis.title.y = element_text(color = "black", size=24),
axis.text.y=element_text(colour="black"),
plot.title = element_text(hjust = 0.5,size=36),
text = element_text(size=24))
# Make US plot
plot_US_animate <- data %>%
select(location,date,total_deaths,new_deaths_smoothed,new_deaths,
new_cases_smoothed,total_cases,hosp_patients,people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred)  %>%
filter(location %in% c("United States")) %>%
filter(date>=as_date(dmin)&date<=as_date(dmax)) %>%
rename(cases=new_cases_smoothed,deaths=new_deaths_smoothed,deathstoday=new_deaths,hospital=hosp_patients,vaccines=people_fully_vaccinated_per_hundred) %>%
select(date,cases,hospital,deaths,deathstoday,vaccines) %>%
mutate(deaths=deaths) %>%
mutate(deathstoday=deathstoday) %>%
mutate(hospital=hospital/50) %>%
mutate(vaccines=vaccines*100) %>%
pivot_longer(-date,names_to="variable") %>%
mutate(date=as_date(ifelse(variable=="hospital",date-0,date))) %>%
mutate(date=as_date(ifelse(variable=="deaths",date,date))) %>%
pivot_wider(names_from = variable,values_from=value) %>%
drop_na(deaths) %>%
ggplot(aes(x = date))+
geom_line(aes(y=`vaccines`),size=1.5,color="blue") +
geom_line(aes(y=`deaths`),size=1.5,color="black") +
geom_text(aes(label=paste0(floor(`vaccines`/10)/10,"% \n Fully Vaccinated"),x=date,y=`vaccines`+200),
position=position_nudge(0.1), color="blue", size=7, hjust=0.6, show.legend=FALSE) +
geom_text(aes(label=sprintf("%1.0f",deaths),x=date,y=deaths),
position=position_nudge(0.1), color="black", size=8, hjust=-0.2, show.legend=FALSE) +
transition_reveal(date) +
labs(x = "Date")+
ggtitle(paste0("US COVID-19 Daily Deaths"))+
theme_minimal() +
scale_y_continuous(name = "Ave. Daily Deaths",breaks= pretty_breaks(),limits = c(0, NA) ) +
scale_x_date(labels = date_format("%b-%y")) +
theme(axis.title.y = element_text(color = "black", size=24),
axis.text.y=element_text(colour="black"),
plot.title = element_text(hjust = 0.5,size=36),
text = element_text(size=24))
#### With the following code we can read all the sheets in the excel file.
meatPath <- "Data/FoodAvailabilityData/RedMeatPoultryFish.xlsx"
allmeatAvailability<- lapply(excel_sheets(meatPath), read_excel, path = meatPath)
meatPath
getwd()
read_excel("Data/FoodAvailabilityData/RedMeatPoultryFish.xlsx")
#### With the following code we can read all the sheets in the excel file.
meatPath <- "Data/FoodAvailabilityData/RedMeatPoultryFish.xlsx"
allmeatAvailability<- lapply(excel_sheets(meatPath), read_excel, path = meatPath)
allmeatAvailability
meatCarcass <- allmeatAvailability[[2]] %>% as.data.frame()
meatCarcass
names(meatCarcass) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Total_Meat_PCC")
meatCarcass
meatCarcass%>% head()
meatCarcass <- allmeatAvailability[[2]] %>% as.data.frame()
names(meatCarcass) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Total_Meat_PCC")
meatCarcass <- meatCarcass[-(1:5),]
meatCarcass
meatCarcass <- sapply(meatCarcass, as.numeric) %>% as.data.frame()
meatCarcass
#### The data are for per capita and are in pounds(retail weight)
meatretail <- allmeatAvailability[[3]] %>% as.data.frame()
#### The data are for per capita and are in pounds(retail weight)
meatRetail <- allmeatAvailability[[3]] %>% as.data.frame()
names(meatRetail) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"YoungChicken_PCC", "OtherChicken_PCC", "Total_Chicken")
meatRetail
meatRetail <- meatRetail[-(1:5),]
meatRetail
meatRetail <- sapply(meatRetail, as.numeric) %>% as.data.frame()
meatRetail
#### The data are for per capita and are in pounds(Boneless weight)
meatBoneless <- allmeatAvailability[[4]] %>% as.data.frame()
names(meatBoneless) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Fish_ShellFish_PCC", "Total_Meat_PCC")
meatBoneless
meatBoneless <- meatBoneless[-(1:5),]
meatBoneless <- sapply(meatBoneless, as.numeric) %>% as.data.frame()
meatBoneless
meatBoneless <- round(meatBoneless,4)
meatBoneless
meatRetail <- round(meatRetail,4)
meatCarcass <- round(meatCarcass,4)
#### With the following code we can read all the sheets in the excel file.
meatPath <- "Data/FoodAvailabilityData/RedMeatPoultryFish.xlsx"
allmeatAvailability<- lapply(excel_sheets(meatPath), read_excel, path = meatPath)
meatCarcass <- allmeatAvailability[[2]] %>% as.data.frame()
names(meatCarcass) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Total_Meat_PCC")
meatCarcass <- meatCarcass[-(1:5),]
meatCarcass <- sapply(meatCarcass, as.numeric) %>% as.data.frame()
meatCarcass <- round(meatCarcass,4)
#### The data are for per capita and are in pounds(retail weight)
meatRetail <- allmeatAvailability[[3]] %>% as.data.frame()
names(meatRetail) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"YoungChicken_PCC", "OtherChicken_PCC", "Total_Chicken")
meatRetail <- meatRetail[-(1:5),]
meatRetail <- sapply(meatRetail, as.numeric) %>% as.data.frame()
meatRetail <- round(meatRetail,4)
#### The data are for per capita and are in pounds(Boneless weight)
meatBoneless <- allmeatAvailability[[4]] %>% as.data.frame()
names(meatBoneless) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Veal_PCC", "Pork_PCC", "Lamb_PCC", "Total_RedMeat",
"Chicken_PCC", "Turkey_PCC", "Total_Poultry", "Fish_ShellFish_PCC", "Total_Meat_PCC")
meatBoneless <- meatBoneless[-(1:5),]
meatBoneless <- sapply(meatBoneless, as.numeric) %>% as.data.frame()
meatBoneless <- round(meatBoneless,4)
#### Leading Meat(Boneless weight)
meatLeading <- allmeatAvailability[[5]] %>% as.data.frame()
names(meatLeading) <- c("Year", "U.S.Pop_million", "Beef_PCC", "Pork_PCC",
"Chicken_PCC", "Total_LeadingMeat_PCC")
meatLeading
meatLeading <- meatLeading[-(1:5),]
meatLeading <- sapply(meatLeading, as.numeric) %>% as.data.frame()
meatLeading <- round(meatLeading,4)
meatLeading
meatLeading <- round(meatLeading,4) %>% filter(Year<=2019)
meatLeading
